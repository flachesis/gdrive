#!/usr/bin/env php
<?php
require __DIR__ . '/vendor/autoload.php';

if (php_sapi_name() != 'cli') {
    throw new Exception('This application must be run on the command line.');
}

/**
 * Returns an authorized API client.
 * @return Google_Client the authorized client object
 */
function getClient()
{
    $client = new Google_Client([
        'retry' => [
            'initial_delay' => 60,
            'max_delay' => 3600,
            'retries' => 10,
        ],
    ]);
    $client->setApplicationName('copy drive');
    $client->setScopes(Google_Service_Drive::DRIVE);
    $client->setAuthConfig('client_secret.json');
    $client->setAccessType('offline');
    $client->setPrompt('select_account consent');

    // Load previously authorized token from a file, if it exists.
    // The file token.json stores the user's access and refresh tokens, and is
    // created automatically when the authorization flow completes for the first
    // time.
    $tokenPath = __DIR__ . '/token.json';
    if (file_exists($tokenPath)) {
        $accessToken = json_decode(file_get_contents($tokenPath), true);
        $client->setAccessToken($accessToken);
    }

    // If there is no previous token or it's expired.
    if ($client->isAccessTokenExpired()) {
        // Refresh the token if possible, else fetch a new one.
        if ($client->getRefreshToken()) {
            $client->fetchAccessTokenWithRefreshToken($client->getRefreshToken());
        } else {
            // Request authorization from the user.
            $authUrl = $client->createAuthUrl();
            printf("Open the following link in your browser:\n%s\n", $authUrl);
            print 'Enter verification code: ';
            $authCode = trim(fgets(STDIN));

            // Exchange authorization code for an access token.
            $accessToken = $client->fetchAccessTokenWithAuthCode($authCode);
            $client->setAccessToken($accessToken);

            // Check to see if there was an error.
            if (array_key_exists('error', $accessToken)) {
                throw new Exception(join(', ', $accessToken));
            }
        }
        // Save the token to a file.
        if (!file_exists(dirname($tokenPath))) {
            mkdir(dirname($tokenPath), 0700, true);
        }
        file_put_contents($tokenPath, json_encode($client->getAccessToken()));
    }
    return $client;
}

function makeFileList(Google_Service_Drive $service, $parentId, $listName = 'filelist.txt', $nextPageToken = null)
{
    $query = [
        'q' => '"' . $parentId . '" in parents',
        'pageSize' => 1000,
    ];
    if (null != $nextPageToken) {
        $query['pageToken'] = $nextPageToken;
    }
    $results = $service->files->listFiles($query);
    foreach ($results->getFiles() as $file) {
        $info = sprintf("%s\t%s\t%s\t%s\n", $file->getId(), $parentId, $file->getMimeType(), $file->getName());
        file_put_contents($listName, $info, FILE_APPEND);
        if ('application/vnd.google-apps.folder' == $file->getMimeType()) {
            makeFileList($service, $file->getId(), $listName);
        }
    }
    if (null != $results->getNextPageToken()) {
        makeFileList($service, $parentId, $listName, $results->getNextPageToken());
    }
}

function makeCopy(Google_Service_Drive $service, $parentId, $listName = 'filelist.txt')
{
    $data = trim(file_get_contents($listName));
    $lines = explode("\n", $data);
    $map = [];
    foreach ($lines as $line) {
        $info = explode("\t", $line);
        if ('application/vnd.google-apps.folder' == $info[2]) {
            $file = new Google_Service_Drive_DriveFile();
            $file->setName($info[3]);
            $file->setMimeType('application/vnd.google-apps.folder');
            $parent = $parentId;
            if (isset($map[$info[1]])) {
                $parent = $map[$info[1]];
            }
            $file->setParents([$parent]);
            $map[$info[0]] = $service->files->create($file)->getId();
        } else {
            $file = new Google_Service_Drive_DriveFile();
            $file->setName($info[3]);
            $file->setMimeType($info[2]);
            $parent = $parentId;
            if (isset($map[$info[1]])) {
                $parent = $map[$info[1]];
            }
            $file->setParents([$parent]);
            $service->files->copy($info[0], $file);
        }
    }
}

if (count($argv) < 3) {
    return 1;
}

// Get the API client and construct the service object.
$client = getClient();
$service = new Google_Service_Drive($client);

makeFileList($service, $argv[1]);
makeCopy($service, $argv[2]);
